From 5d5436dfa3bdde7b4e87ce5a40cbc724199847d6 Mon Sep 17 00:00:00 2001
From: Hongxu Jia <hongxu.jia@windriver.com>
Date: Mon, 8 May 2017 16:18:02 +0800
Subject: [PATCH 03/11] support infinit timeout

Upstream-Status: Pending

Signed-off-by: Hongxu Jia <hongxu.jia@windriver.com>
---
 blivet/util.py | 12 ++++++++----
 1 file changed, 8 insertions(+), 4 deletions(-)

diff --git a/blivet/util.py b/blivet/util.py
index 4f05076..7e89949 100644
--- a/blivet/util.py
+++ b/blivet/util.py
@@ -158,6 +158,7 @@ class Path(str):
     def __hash__(self):
         return self._path.__hash__()
 
+# timeout = -1 means infinite timeout, always wait.
 def timeout_command(argv, timeout, *args, **kwargs):
     """call shell-command and either return its output or kill it
     if it doesn't normally exit within timeout seconds and return None"""
@@ -169,7 +170,7 @@ def timeout_command(argv, timeout, *args, **kwargs):
         while proc.poll() is None:
             time.sleep(0.1)
             now = datetime.datetime.now()
-            if (now - start).seconds> timeout:
+            if timeout != -1 and (now - start).seconds> timeout:
                 os.kill(proc.pid, signal.SIGKILL)
                 os.waitpid(-1, os.WNOHANG)
                 program_log.debug("%d seconds timeout" % timeout)
@@ -183,7 +184,7 @@ def timeout_command(argv, timeout, *args, **kwargs):
     program_log.debug("Return code: %d", proc.returncode)
     return (proc.returncode, proc.stdout.read())
 
-def _run_program(argv, root='/', stdin=None, env_prune=None, stderr_to_stdout=False, binary_output=False):
+def _run_program(argv, root='/', stdin=None, env_prune=None, stderr_to_stdout=False, binary_output=False, timeout=10):
     if env_prune is None:
         env_prune = []
 
@@ -192,7 +193,10 @@ def _run_program(argv, root='/', stdin=None, env_prune=None, stderr_to_stdout=Fa
             os.chroot(root)
 
     with program_log_lock:  # pylint: disable=not-context-manager
-        program_log.info("Running... %s", " ".join(argv))
+        if timeout != -1:
+            program_log.info("Running... %s", " ".join(argv))
+        else:
+            program_log.info("Running... %s ...infinite timeout", " ".join(argv))
 
         env = os.environ.copy()
         env.update({"LC_ALL": "C",
@@ -205,7 +209,7 @@ def _run_program(argv, root='/', stdin=None, env_prune=None, stderr_to_stdout=Fa
         else:
             stderr_dir = subprocess.PIPE
 
-        res, out = timeout_command(argv, 10,
+        res, out = timeout_command(argv, timeout,
                                    stdin=stdin,
                                    stdout=subprocess.PIPE,
                                    stderr=stderr_dir,
-- 
2.7.4

